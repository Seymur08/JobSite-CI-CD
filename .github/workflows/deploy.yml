name: CI/CD for Job-Site

on:
  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # üì• Repo klonla
      - uses: actions/checkout@v4

      # üîß .NET Setup v…ô Build
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üî® Build API
        working-directory: ./Job_Site
        run: |
          dotnet restore
          dotnet build --configuration Release

      # üì¶ Node Setup v…ô Frontend Build
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.3'

      - name: üì¶ Build Frontend
        working-directory: ./Job-site
        run: |
          npm install
          npm run build

      # üê≥ Docker Compose il…ô test
      - uses: docker/setup-buildx-action@v3

      - name: üîß Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: üöÄ Run Docker Compose
        run: docker-compose -f Job_Site/Docker-compose.yml up -d

      - name: ‚è≥ Wait for services
        run: sleep 20




# name: CI/CD for Job-Site

# on:
#   push:
#     branches: ["main"]

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: ['20.19.3']

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       # ----- BACKEND -----
#       - name: Setup .NET
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: '8.0.x' # v…ô ya istifad…ô etdiyin versiya

#       - name: Restore API Dependencies
#         working-directory: ./Job_Site
#         run: dotnet restore

#       - name: Build API
#         working-directory: ./Job_Site
#         run: dotnet build --configuration Release

#       - name: Publish API
#         working-directory: ./Job_Site
#         run: dotnet publish -c Release -o ./publish

#       # ----- FRONTEND -----
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}

#       - name: Install Frontend Dependencies
#         working-directory: ./Job-site
#         run: npm install

#       - name: Build Frontend
#         working-directory: ./Job-site
#         run: npm run build

#       # ----- DOCKER COMPOSE ƒ∞L∆è TEST -----
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Run Docker Compose
#         run: docker-compose up -d
#         # ∆èg…ôr docker-compose.yml ba≈üqa yerd…ôdirs…ô:
#         # run: docker-compose -f ./docker/docker-compose.yml up -d

#       - name: Wait for services to start
#         run: sleep 20 # servis y√ºkl…ônm…ôsi √º√ß√ºn g√∂zl…ôm…ô

#       - name: Check API health
#         run: curl http://localhost:5156/swagger || exit 1

#       - name: Show Running Containers
#         run: docker ps

























# name: CI/CD for Job-Site

# on:
#   push:
#     branches: ["main"]

# jobs:
      
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: ['20.19.3']
        
#     steps:
#       - name: Job-Site Repository
#         uses: actions/checkout@v4

#       - name: Job-Site Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}

#       - name: Api Dependency Install
#         working-directory: ./api
#         run: npm install

#       - name: Job_Site Dependency Install
#         working-directory: ./Job_Site
#         run: dotnet restore

